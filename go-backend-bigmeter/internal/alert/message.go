package alert

import (
	"fmt"
	"strconv"
	"strings"
	"time"
)

var thaiMonths = []string{
	"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
	"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
}

// FormatAlertMessage formats alert statistics into a Thai language message
func FormatAlertMessage(stats *AlertStats, link string) string {
	// Format current date in Thai
	now := stats.GeneratedAt
	thaiYear := now.Year() + 543
	thaiMonth := thaiMonths[now.Month()-1]
	dateStr := fmt.Sprintf("%02d %s %d", now.Day(), thaiMonth, thaiYear)

	var builder strings.Builder

	// Header
	builder.WriteString("üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n")
	builder.WriteString(fmt.Sprintf("üìÖ ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà %s\n", dateStr))
	builder.WriteString(fmt.Sprintf("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏•‡∏î‡∏•‡∏á %.0f%% ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ\n", stats.Threshold))
	builder.WriteString("\n---\n\n")

	// Branch list
	if len(stats.BranchAlerts) == 0 {
		builder.WriteString("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç\n")
	} else {
		for _, branchAlert := range stats.BranchAlerts {
			branchName := branchAlert.BranchName
			if branchName == "" {
				branchName = branchAlert.BranchCode
			}
			builder.WriteString(fmt.Sprintf("- %s %d ‡∏£‡∏≤‡∏¢\n", branchName, branchAlert.Count))
		}
	}

	builder.WriteString("\n---\n\n")

	// Footer
	if link != "" {
		builder.WriteString(fmt.Sprintf("üí° ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà %s\n", link))
	}
	builder.WriteString("‚è≥ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πà‡∏á‡∏£‡∏±‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö\n")

	return builder.String()
}

// FormatThaiMonth formats YYYYMM to Thai month name
func FormatThaiMonth(ym string) string {
	if len(ym) != 6 {
		return ym
	}

	year, err := strconv.Atoi(ym[:4])
	if err != nil {
		return ym
	}

	month, err := strconv.Atoi(ym[4:])
	if err != nil || month < 1 || month > 12 {
		return ym
	}

	thaiYear := year + 543
	return fmt.Sprintf("%s %d", thaiMonths[month-1], thaiYear)
}

// FormatThaiDate formats a time.Time to Thai date format
func FormatThaiDate(t time.Time) string {
	thaiYear := t.Year() + 543
	thaiMonth := thaiMonths[t.Month()-1]
	return fmt.Sprintf("%02d %s %d", t.Day(), thaiMonth, thaiYear)
}
